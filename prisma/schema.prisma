generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  books         Book[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id                 String      @id @default(cuid())
  title              String
  introduction       String?     @db.Text
  conclusion         String?     @db.Text
  customInstructions String?     @db.Text
  genre              String?
  targetAudience     String?
  status             BookStatus  @default(DRAFT)
  coverImage         String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  userId             String
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapters           Chapter[]
  audioGenerations   AudioGeneration[]
  audioJobs          AudioJob[]
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  order     Int
  wordCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  audioGenerations AudioGeneration[]
  audioJobs AudioJob[]

  @@unique([bookId, order])
}

model AudioGeneration {
  id           String            @id @default(cuid())
  audioUrl     String?
  voiceId      String
  voiceName    String
  contentType  AudioContentType
  textLength   Int
  status       AudioJobStatus    @default(PENDING)
  jobId        String?           @unique
  errorMessage String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  bookId       String
  book         Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapterId    String?
  chapter      Chapter?          @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([bookId, chapterId, contentType])
}

model AudioJob {
  id           String            @id @default(cuid())
  jobId        String            @unique
  status       AudioJobStatus    @default(PENDING)
  audioUrl     String?
  errorMessage String?
  voiceId      String
  voiceName    String
  text         String            @db.Text
  contentType  AudioContentType
  bookId       String
  chapterId    String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  book         Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter      Chapter?          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

enum BookStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  PUBLISHED
}

enum AudioContentType {
  INTRODUCTION
  CHAPTER
  FULL_BOOK
}

enum AudioJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
